name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: rean_cloud
          MYSQL_USER: admin
          MYSQL_PASSWORD: Qwe445566
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django system checks
        run: python manage.py check

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests
        run: python manage.py test

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd /home/ubuntu/course_platform

            # Pull latest code (if repo exists on the server)
            git pull origin main

            # Activate virtual environment (adjust path if needed)
            source venv/bin/activate

            # Install/update dependencies
            pip install -r requirements.txt

            # Apply Django settings
            ./update_settings.sh

            # Run migrations and collect static files
            python manage.py migrate --noinput
            python manage.py collectstatic --noinput

            # Restart Nginx
            sudo ./nginx_setup.sh

            # Kill old Gunicorn process if exists
            pkill gunicorn || true

            # Start Gunicorn in background with nohup
            nohup gunicorn --bind 0.0.0.0:8000 course_platform.wsgi:application > gunicorn.log 2>&1 &
